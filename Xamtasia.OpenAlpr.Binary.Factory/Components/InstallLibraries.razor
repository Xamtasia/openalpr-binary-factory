@using System.Diagnostics;

<style>
    div.scroll {
        margin: 4px, 4px;
        padding: 4px;
        background-color: black;
        color:white;
        width: 100%;
        height: 800px;
        overflow-x: hidden;
        overflow-y: auto;
    }
</style>
<div>
    <button style="float:right;margin:10px;" @onclick="ShowDuShStar">Show du -sh *</button>
    <button style="        float: right;
        margin: 10px;
" @onclick="InstallLibrariesIntoDirectory">Install Library Sources</button>
</div>
<div style="background-color:black;padding:4px;">
    <div class="scroll">
        <pre style="color:white;">
    @Message
    </pre>
    </div>
    <div style="color:red">@Error</div>
</div>

@code {

    enum ConsoleManager
    {
        Installer,
        DuShStar
    }

    string Message { get; set; }
    string Error { get; set; }
    ConsoleManager Console { get; set; }

    Process installProcess = new Process();
    Process duShStarProcess = new Process();

    private void ShowDuShStar()
    {
        Console = ConsoleManager.DuShStar;
        Message = @">du -sh *
";
        DuShStarProcess();
    }

    void DuShStarProcess()
    {
        duShStarProcess = new Process();
        duShStarProcess.EnableRaisingEvents = true;
        duShStarProcess.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(DuShStarProcess_OutputDataReceived);
        duShStarProcess.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(DuShStarProcess_ErrorDataReceived);
        duShStarProcess.Exited += new System.EventHandler(DuShStarProcess_Exited);

        duShStarProcess.StartInfo.FileName = "/bin/bash";
        duShStarProcess.StartInfo.Arguments = $"-c \"/scripts/dushstar\"";
        // process.StartInfo.Arguments = $"-c \"/Users/developer/source/Xamtasia.OpenAlpr.Binary.Factory/script\"";
        duShStarProcess.StartInfo.UseShellExecute = false;
        duShStarProcess.StartInfo.RedirectStandardError = true;
        duShStarProcess.StartInfo.RedirectStandardOutput = true;

        duShStarProcess.Start();
        duShStarProcess.BeginErrorReadLine();
        duShStarProcess.BeginOutputReadLine();

        //below line is optional if we want a blocking call
        //process.WaitForExit();
    }

    async void DuShStarProcess_Exited(object sender, EventArgs e)
    {
        if (Console == ConsoleManager.DuShStar)
        {
            await InvokeAsync(() =>
            {
                Error = "'du -sh *' Process Exited.";
                StateHasChanged();
            });
        }
    }

    async void DuShStarProcess_ErrorDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.DuShStar)
        {
            await InvokeAsync(() =>
            {
                Error = e.Data;
                StateHasChanged();
            });
        }
    }

    async void DuShStarProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.DuShStar)
        {
            await InvokeAsync(() =>
            {
                string msg = Message;
                msg += $"{e.Data}\n\n";
                Message = msg;
                StateHasChanged();
            });
        }
    }

    private void InstallLibrariesIntoDirectory()
    {
        Console = ConsoleManager.Installer;
        Message = @"Downloading ...
";
        InstallProcess();
    }

    void InstallProcess()
    {
        installProcess.EnableRaisingEvents = true;
        installProcess.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(installProcess_OutputDataReceived);
        installProcess.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(installProcess_ErrorDataReceived);
        installProcess.Exited += new System.EventHandler(installProcess_Exited);

        installProcess.StartInfo.FileName = "/bin/bash";
        installProcess.StartInfo.Arguments = $"-c \"/scripts/downloadandunpacklibraries\"";
        // process.StartInfo.Arguments = $"-c \"/Users/developer/source/Xamtasia.OpenAlpr.Binary.Factory/script\"";
        installProcess.StartInfo.UseShellExecute = false;
        installProcess.StartInfo.RedirectStandardError = true;
        installProcess.StartInfo.RedirectStandardOutput = true;

        installProcess.Start();
        installProcess.BeginErrorReadLine();
        installProcess.BeginOutputReadLine();

        //below line is optional if we want a blocking call
        //process.WaitForExit();
    }

    async void installProcess_Exited(object sender, EventArgs e)
    {
        if (Console == ConsoleManager.Installer)
        {
            await InvokeAsync(() =>
            {
                Error = "Install Process Exited.";
                StateHasChanged();
            });
        }
    }

    async void installProcess_ErrorDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.Installer)
        {
            await InvokeAsync(() =>
            {
                Error = e.Data;
                StateHasChanged();
            });
        }
    }

    async void installProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.Installer)
        {
            await InvokeAsync(() =>
            {
                string msg = Message;
                msg += $"{e.Data}\n\n";
                Message = msg;
                StateHasChanged();
            });
        }
    }

    protected override Task OnInitializedAsync()
    {
        Message = string.Empty;
        Error = string.Empty;

        return base.OnInitializedAsync();
    }

}
