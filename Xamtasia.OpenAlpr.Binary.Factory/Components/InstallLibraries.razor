@using System.Diagnostics;
@using Newtonsoft.Json
@inject IJSRuntime JS


<style>

    .InstallLibrariesPanel {
        display: flex;
        flex-direction: column;
        background-color: lightblue;
    }

        .InstallLibrariesPanel > .InstallLibrariesPanel_Title {
            order: 0;
            font-weight: bold;
        }

        .InstallLibrariesPanel > .InstallLibrariesPanel_Libraries {
            order: 1;
        }

        .InstallLibrariesPanel > .InstallLibrariesPanel_Legend {
            order: 2;
        }

        .InstallLibrariesPanel > .InstallLibrariesPanel_Console {
            order: 3;
        }

    div.scroll {
        margin: 4px, 4px;
        padding: 4px;
        background-color: black;
        color: white;
        width: 100%;
        height: 800px;
        overflow-x: hidden;
        overflow-y: auto;
    }

    .labels {
        float: left;
        margin: 4px;
    }

    .smallLabelText {
        font-size: xx-small;
    }

    .pipeseparator {
        color: black;
    }
</style>
<div class="InstallLibrariesPanel">
    <div class="InstallLibrariesPanel_Title labels">
        MODULES
    </div>
    <div class="InstallLibrariesPanel_Libraries" style="display:inline-block">
        <div id="InstallLibrariesPanel_Libraries_OpenCV4Android" class="labels">OpenCV4Android</div>
        <div class="labels pipeseparator">|</div>
        <div id="InstallLibrariesPanel_Libraries_AndroidNDK" class="labels">Android NDK</div>
        <div class="labels pipeseparator">|</div>
        <div id="InstallLibrariesPanel_Libraries_Tesseract" class="labels">Tesseract</div>
        <div class="labels pipeseparator">|</div>
        <div id="InstallLibrariesPanel_Libraries_OpenALPR" class="labels">OpenALPR</div>
    </div>
    <div class="InstallLibrariesPanel_Legend">
        <div class="labels smallLabelText" style="font-weight:bold;">Legend:</div>
        <div class="labels smallLabelText" style="color:green;">Installed</div>
        <div class="labels smallLabelText" style="color:red">Not Installed</div>
    </div>
    <div class="InstallLibrariesPanel_Console" style="background-color:black;padding:4px;">
        <div style="display:inherit">
            <button style="float:right;margin:10px;" @onclick="DeleteInstallation">Delete Installation</button>
            <button style="float:right;margin:10px;" @onclick="ShowTree">Show 'tree /src/mapped/*'</button>
            <button style="float:right;margin:10px;" @onclick="ShowDuShStar">Show 'du -sh /src/*'</button>
            <button style="float: right;margin: 10px;" @onclick="InstallLibrariesIntoDirectory">Install Library Sources</button>
            <button style="float: right;margin: 10px;" @onclick="GetContainerSettings">Check Installed</button>
        </div>
        <div class="scroll">
            <pre style="color:white;">
    @Message
    </pre>
        </div>
        <div style="color:red">@Error</div>
    </div>
</div>
<div class="labels" style="background-color:gray">@Debug</div>
<div class="labels" style="background-color:gray">@DebugError</div>


@code {

    public string Debug { get; set; }
    public string DebugError { get; set; }

    public class ContainerState
    {
        public bool IsTesseractInstalled { get; set; }
        public bool IsOpenCV4AndroidInstalled { get; set; }
        public bool IsAndroidNDKInstalled { get; set; }
        public bool IsOpenALPRInstalled { get; set; }
    }

    enum Installing
    {
        active,
        inactive
    }

    enum DushStar
    {
        active,
        inactive
    }

    enum ConsoleManager
    {
        Installer,
        DuShStar,
        Tree,
        DeleteInstallation
    }

    private Installing _installing = Installing.inactive;
    private DushStar _dushstaring = DushStar.inactive;

    public string CurrentContainerStateJson { get; set; }
    public ContainerState CurrentContainerState { get; set; }

    string Message { get; set; }
    string Error { get; set; }
    ConsoleManager Console { get; set; }

    string _installMessage = string.Empty;

    Process installProcess = new Process();
    Process duShStarProcess = new Process();
    Process treeProcess = new Process();
    Process deleteProcess = new Process();

    #region Is Library Installed

    bool _isTesseractInstalled;

    Process getSystemStateProcess = new Process();

    #endregion

    async Task GetContainerSettings()
    {
        Error = string.Empty;
        GetContainerSettingsProcess();
    }

    void GetContainerSettingsProcess()
    {
        getSystemStateProcess = new Process();
        getSystemStateProcess.EnableRaisingEvents = true;
        getSystemStateProcess.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(GetContainerSettingsProcess_OutputDataReceived);
        getSystemStateProcess.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(GetContainerSettingsProcess_ErrorDataReceived);
        getSystemStateProcess.Exited += new System.EventHandler(GetContainerSettingsProcess_Exited);

        getSystemStateProcess.StartInfo.FileName = "/bin/bash";
        //getSystemStateProcess.StartInfo.Arguments = $"-c \"/scripts/deleteinstallation\"";
        getSystemStateProcess.StartInfo.Arguments = $"-c \"/scripts/getsystemstate\"";
        getSystemStateProcess.StartInfo.UseShellExecute = false;
        getSystemStateProcess.StartInfo.RedirectStandardError = true;
        getSystemStateProcess.StartInfo.RedirectStandardOutput = true;

        getSystemStateProcess.Start();
        getSystemStateProcess.BeginErrorReadLine();
        getSystemStateProcess.BeginOutputReadLine();

        //below line is optional if we want a blocking call
        //process.WaitForExit();
    }

    async void GetContainerSettingsProcess_Exited(object sender, EventArgs e)
    {
        await InvokeAsync(() =>
        {
            Error = "'rm -rf /src/*' Process Exited.";
            StateHasChanged();
        });
    }

    async void GetContainerSettingsProcess_ErrorDataReceived(object sender, DataReceivedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            Error = e.Data;
            StateHasChanged();
        });
    }

    async void GetContainerSettingsProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await UpdateSystemState(e.Data);
        });
    }

    async Task TempJavascriptTest()
    {
        await JavascriptStyleColor("InstallLibrariesPanel_Libraries_OpenCV4Android", "green");
    }

    async Task UpdateSystemState(string json)
    {
        if (!string.IsNullOrEmpty(json))
        {
            var containerstate = JsonConvert.DeserializeObject<ContainerState>(json);

            if (containerstate.IsAndroidNDKInstalled)
            {
                await JavascriptStyleColor("InstallLibrariesPanel_Libraries_AndroidNDK", "green");
            }
            else
            {
                await JavascriptStyleColor("InstallLibrariesPanel_Libraries_AndroidNDK", "red");
            }

            if (containerstate.IsOpenALPRInstalled)
            {
                await JavascriptStyleColor("InstallLibrariesPanel_Libraries_OpenALPR", "green");
            }
            else
            {
                await JavascriptStyleColor("InstallLibrariesPanel_Libraries_OpenALPR", "red");
            }

            if (containerstate.IsOpenCV4AndroidInstalled)
            {
                await JavascriptStyleColor("InstallLibrariesPanel_Libraries_OpenCV4Android", "green");
            }
            else
            {
                await JavascriptStyleColor("InstallLibrariesPanel_Libraries_OpenCV4Android", "red");
            }

            if (containerstate.IsTesseractInstalled)
            {
                await JavascriptStyleColor("InstallLibrariesPanel_Libraries_Tesseract", "green");
            }
            else
            {
                await JavascriptStyleColor("InstallLibrariesPanel_Libraries_Tesseract", "red");
            }
        }
    }

    async Task JavascriptStyleColor(string id, string color)
    {
        await JS.InvokeVoidAsync(
            "handleChangeStyleColor",
            id,
            color);
    }

    // ------------------------------------------------------------------------------------------
    async Task DeleteInstallation()
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure that you want to delete this installation?"))
            return;

        if (_installing == Installing.inactive)
        {
            Console = ConsoleManager.DeleteInstallation;
            Message = @"User$ rm -rf /src/*
";
            Error = string.Empty;
            DeleteProcess();
        }
        else
        {
            await InvokeAsync(async () =>
            {
                _dushstaring = DushStar.inactive;
                await Task.Delay(1500);
                Error = "Cannot Delete until installation is finished installing!";
                Message = string.Empty;
                StateHasChanged();
            });
        }
    }

    void DeleteProcess()
    {
        deleteProcess = new Process();
        deleteProcess.EnableRaisingEvents = true;
        deleteProcess.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(DeleteProcess_OutputDataReceived);
        deleteProcess.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(DeleteProcess_ErrorDataReceived);
        deleteProcess.Exited += new System.EventHandler(DeleteProcess_Exited);

        deleteProcess.StartInfo.FileName = "/bin/bash";
        //deleteProcess.StartInfo.Arguments = $"-c \"/scripts/deleteinstallation\"";
        deleteProcess.StartInfo.Arguments = $"-c \"/scripts/getsystemstate\"";
        deleteProcess.StartInfo.UseShellExecute = false;
        deleteProcess.StartInfo.RedirectStandardError = true;
        deleteProcess.StartInfo.RedirectStandardOutput = true;

        deleteProcess.Start();
        deleteProcess.BeginErrorReadLine();
        deleteProcess.BeginOutputReadLine();

        //below line is optional if we want a blocking call
        //process.WaitForExit();
    }

    async void DeleteProcess_Exited(object sender, EventArgs e)
    {
        if (Console == ConsoleManager.DeleteInstallation)
        {
            await InvokeAsync(() =>
            {
                Error = "'rm -rf /src/*' Process Exited.";
                StateHasChanged();
            });
        }
    }

    async void DeleteProcess_ErrorDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.DeleteInstallation)
        {
            await InvokeAsync(() =>
            {
                Error = e.Data;
                StateHasChanged();
            });
        }
    }

    async void DeleteProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.DeleteInstallation)
        {
            await InvokeAsync(() =>
            {
                string msg = Message;
                msg += $"{e.Data}\n";
                Message = msg;
                StateHasChanged();
            });
        }
    }

    void ShowTree()
    {
        Console = ConsoleManager.Tree;
        Message = @"User$ tree /src/mapped/*
";
        Error = string.Empty;
        TreeProcess();
    }

    void TreeProcess()
    {
        treeProcess = new Process();
        treeProcess = new Process();
        treeProcess.EnableRaisingEvents = true;
        treeProcess.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(TreeProcess_OutputDataReceived);
        treeProcess.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(TreeProcess_ErrorDataReceived);
        treeProcess.Exited += new System.EventHandler(TreeProcess_Exited);

        treeProcess.StartInfo.FileName = "/bin/bash";
        treeProcess.StartInfo.Arguments = $"-c \"/scripts/treestar\"";
        treeProcess.StartInfo.UseShellExecute = false;
        treeProcess.StartInfo.RedirectStandardError = true;
        treeProcess.StartInfo.RedirectStandardOutput = true;

        treeProcess.Start();
        treeProcess.BeginErrorReadLine();
        treeProcess.BeginOutputReadLine();

        //below line is optional if we want a blocking call
        //process.WaitForExit();
    }

    async void TreeProcess_Exited(object sender, EventArgs e)
    {
        if (Console == ConsoleManager.Tree)
        {
            await InvokeAsync(() =>
            {
                Error = "'tree /src/*' Process Exited.";
                StateHasChanged();
            });
        }
    }

    async void TreeProcess_ErrorDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.Tree)
        {
            await InvokeAsync(() =>
            {
                Error = e.Data;
                StateHasChanged();
            });
        }
    }

    async void TreeProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.Tree)
        {
            await InvokeAsync(() =>
            {
                string msg = Message;
                msg += $"{e.Data}\n";
                Message = msg;
                StateHasChanged();
            });
        }
    }

    private async Task ShowDuShStar()
    {
        Console = ConsoleManager.DuShStar;

        if (_dushstaring == DushStar.inactive)
        {
            _dushstaring = DushStar.active;
            Message = @"User$ du -sh /src/*
";
            Error = string.Empty;
            DuShStarProcess();
        }
        else
        {
            await InvokeAsync(() =>
            {
                Error = string.Empty;
                StateHasChanged();
            });
        }
    }

    void DuShStarProcess()
    {
        duShStarProcess = new Process();
        duShStarProcess.EnableRaisingEvents = true;
        duShStarProcess.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(DuShStarProcess_OutputDataReceived);
        duShStarProcess.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(DuShStarProcess_ErrorDataReceived);
        duShStarProcess.Exited += new System.EventHandler(DuShStarProcess_Exited);

        duShStarProcess.StartInfo.FileName = "/bin/bash";
        duShStarProcess.StartInfo.Arguments = $"-c \"/scripts/dushstar\"";
        // process.StartInfo.Arguments = $"-c \"/Users/developer/source/Xamtasia.OpenAlpr.Binary.Factory/script\"";
        duShStarProcess.StartInfo.UseShellExecute = false;
        duShStarProcess.StartInfo.RedirectStandardError = true;
        duShStarProcess.StartInfo.RedirectStandardOutput = true;

        duShStarProcess.Start();
        duShStarProcess.BeginErrorReadLine();
        duShStarProcess.BeginOutputReadLine();

        //below line is optional if we want a blocking call
        //process.WaitForExit();
    }

    async void DuShStarProcess_Exited(object sender, EventArgs e)
    {
        if (Console == ConsoleManager.DuShStar)
        {
            await InvokeAsync(async () =>
            {
                _dushstaring = DushStar.inactive;
                // Error = "'du -sh *' Process Exited.";
                StateHasChanged();

                await Task.Delay(1000);
                if (Console == ConsoleManager.DuShStar)
                {
                    ShowDuShStar();
                }
            });
        }
    }

    async void DuShStarProcess_ErrorDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.DuShStar)
        {
            await InvokeAsync(() =>
            {
                Error = e.Data;
                StateHasChanged();
            });
        }
    }

    async void DuShStarProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.DuShStar)
        {
            await InvokeAsync(() =>
            {
                string msg = Message;
                msg += $"{e.Data}\n";
                Message = msg;
                StateHasChanged();
            });
        }
    }

    private async Task InstallLibrariesIntoDirectory()
    {
        Console = ConsoleManager.Installer;

        if (_installing == Installing.inactive)
        {
            _installing = Installing.active;
            _installMessage = string.Empty;
            Message = @"Downloading ...
";
            Error = string.Empty;
            InstallProcess();
        }
        else
        {
            await InvokeAsync(() =>
            {
                Message = _installMessage;
                Error = string.Empty;
                StateHasChanged();
            });
        }
    }

    void InstallProcess()
    {
        installProcess = new Process();
        installProcess.EnableRaisingEvents = true;
        installProcess.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(installProcess_OutputDataReceived);
        installProcess.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(installProcess_ErrorDataReceived);
        installProcess.Exited += new System.EventHandler(installProcess_Exited);

        installProcess.StartInfo.FileName = "/bin/bash";
        installProcess.StartInfo.Arguments = $"-c \"/scripts/downloadandunpacklibraries\"";
        // process.StartInfo.Arguments = $"-c \"/Users/developer/source/Xamtasia.OpenAlpr.Binary.Factory/script\"";
        installProcess.StartInfo.UseShellExecute = false;
        installProcess.StartInfo.RedirectStandardError = true;
        installProcess.StartInfo.RedirectStandardOutput = true;

        installProcess.Start();
        installProcess.BeginErrorReadLine();
        installProcess.BeginOutputReadLine();

        //below line is optional if we want a blocking call
        //process.WaitForExit();
    }

    async void installProcess_Exited(object sender, EventArgs e)
    {
        if (Console == ConsoleManager.Installer)
        {
            await InvokeAsync(async() =>
            {
                await GetContainerSettings();
                _installing = Installing.inactive;
                _installMessage = string.Empty;
                Error = "Install Process Exited.";
                StateHasChanged();
            });
        }
    }

    async void installProcess_ErrorDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.Installer)
        {
            await InvokeAsync(() =>
            {
                Error = e.Data;
                StateHasChanged();
            });
        }
    }

    async void installProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (Console == ConsoleManager.Installer)
        {
            await InvokeAsync(() =>
            {
                _installMessage += $"{e.Data}\n";
                Message = _installMessage;
                StateHasChanged();
            });
        }
    }

    protected override Task OnInitializedAsync()
    {
        Debug = "Debug Pane";
        Message = string.Empty;
        Error = string.Empty;

        var state = new ContainerState();

        string json = JsonConvert.SerializeObject(state);

        string newJson = "{ \"IsTesseractInstalled\":true,\"IsOpenCV4AndroidInstalled\":true,\"IsAndroidNDKInstalled\":true,\"IsOpenALPRInstalled\":true}";

        var newobj = JsonConvert.DeserializeObject<ContainerState>(newJson);

        /*
        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this option?"))
            return;
        */

        return base.OnInitializedAsync();
    }

}
