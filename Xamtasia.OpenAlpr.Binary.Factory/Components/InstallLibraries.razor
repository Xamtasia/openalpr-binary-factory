@using System.Diagnostics;

<style>
    div.scroll {
        margin: 4px, 4px;
        padding: 4px;
        background-color: black;
        color:white;
        width: 100%;
        height: 800px;
        overflow-x: hidden;
        overflow-y: auto;
    }
</style>
<div>
    <button @onclick="InstallLibrariesIntoDirectory">Install Library Sources</button>
</div>
<div style="background-color:black;padding:4px;">
    <div class="scroll">
        <pre style="color:white;">
    @Message
    </pre>
    </div>
    <div style="color:red">@Error</div>
</div>

@code {

    string Message { get; set; }
    string Error { get; set; }

    Process process = new Process();

    private void InstallLibrariesIntoDirectory()
    {
        Message = @"Downloading ...
";

        LaunchProcess();

        return;

        try
        {
            var process = new Process()
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "/bin/bash",
                    Arguments = $"-c \"/scripts/downloadandunpacklibraries\"",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    RedirectStandardInput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true,
                }
            };

            process.EnableRaisingEvents = true;

            process.OutputDataReceived += new DataReceivedEventHandler((s, e) =>
            {
                Message += $"{e.Data}\n\n";
            });
            process.ErrorDataReceived += new DataReceivedEventHandler((s, e) =>
            {
                Error = e.Data;
            });

            process.Start();
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();

            //process.Start();
            //string result = process.StandardOutput.ReadToEnd();
            //Message += $"StdOut: {result}";
            //process.WaitForExit();
        }
        catch (Exception ex)
        {
            Message += $"Error: {ex.Message} ";
        }
    }



    void LaunchProcess()
    {
        process.EnableRaisingEvents = true;
        process.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(process_OutputDataReceived);
        process.ErrorDataReceived += new System.Diagnostics.DataReceivedEventHandler(process_ErrorDataReceived);
        process.Exited += new System.EventHandler(process_Exited);

        process.StartInfo.FileName = "/bin/bash";
        //process.StartInfo.Arguments = $"-c \"/scripts/downloadandunpacklibraries\"";
        // /Users/developer/source/Xamtasia.OpenAlpr.Binary.Factory
        process.StartInfo.Arguments = $"-c \"/Users/developer/source/Xamtasia.OpenAlpr.Binary.Factory/script\"";
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.RedirectStandardOutput = true;

        process.Start();
        process.BeginErrorReadLine();
        process.BeginOutputReadLine();

        //below line is optional if we want a blocking call
        //process.WaitForExit();
    }

    async void process_Exited(object sender, EventArgs e)
    {
        await InvokeAsync(() =>
        {
            Error = "Process Exited.";
            StateHasChanged();
        });
    }

    async void process_ErrorDataReceived(object sender, DataReceivedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            Error = e.Data;
            StateHasChanged();
        });
    }

    async void process_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            string msg = Message;
            msg += $"{e.Data}\n\n";
            Message = msg;
            StateHasChanged();
        });
    }

    protected override Task OnInitializedAsync()
    {
        Message = string.Empty;
        Error = string.Empty;

        return base.OnInitializedAsync();
    }

}
